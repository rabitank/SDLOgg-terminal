file(GLOB_RECURSE pro_src ./*/*.cpp )
file(GLOB_RECURSE pro_includes ./*/*.hpp ./*/*.h )

set(pro_include_dirs 
        ./core
        ./mics/include
        )


add_executable(${pro_name} ${pro_src} ${pro_includes})
target_include_directories(${pro_name} PUBLIC ${pro_include_dirs})
message("3rd libs  " ${3rd_LIBS})
target_link_libraries(${pro_name} PUBLIC ${3rd_LIBS})
target_compile_features(${pro_name} PUBLIC cxx_std_17)
target_precompile_headers(${pro_name} PUBLIC mics/include/pch.hpp )

add_compile_options("$<$<C_COMPILER_ID:GNU>:/utf-8>")
add_compile_options("$<$<CXX_COMPILER_ID:GNU>:/utf-8>")    
# target_precompile_headers(${pro_name} PUBLIC ./mics/pch.hpp)


# for testing install
# add_custom_command 签名中的目标必须存在，并且必须在当前目录中定义
macro(add_dllToSystem dll_Path)
    add_custom_command(TARGET ${pro_name} POST_BUILD 
    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${dll_Path} ${SYS_DLL_DIR})
    message("dll :"${dll_Path} )
    message("has added to sys path :"${SYS_DLL_DIR} )
endmacro(add_dllToSystem)

foreach(_var ${3rd_LIBS_DLLS})
    add_dllToSystem(${_var})
endforeach()

message("${pro_name} src files: ${pro_src} ")
message("${pro_name} include files: ${pro_includes} ")


